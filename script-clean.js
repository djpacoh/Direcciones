// ==========================================
// APLICACI√ìN ORDENAR DIRECCIONES - VERSI√ìN LIMPIA
// Interfaz Flotante con Mapa Fullscreen
// ==========================================

// Variables globales
let map;
let currentZones = [];
let zoneMarkers = [];

// Elementos DOM
const elements = {
    readExcel: null,
    processExcel: null,
    cancelProcess: null,
    excelFile: null,
    zoneCount: null,
    maxAddressesPerZone: null,
    minAddressesPerZone: null,
    sortedAddresses: null
};

// ==========================================
// INICIALIZACI√ìN DEL MAPA
// ==========================================

function initializeMap() {
    console.log('üó∫Ô∏è Inicializando mapa...');
    
    try {
        // Crear mapa centrado en Provincia de Barcelona
        map = L.map('map', {
            zoomControl: true,
            attributionControl: false
        }).setView([41.5, 2.0], 10);

        // Agregar capa de tiles
        map.tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '¬© OpenStreetMap contributors',
            maxZoom: 19
        }).addTo(map);

        console.log('‚úÖ Mapa inicializado correctamente - Centrado en Provincia de Barcelona');
        return true;
    } catch (error) {
        console.error('‚ùå Error inicializando mapa:', error);
        return false;
    }
}

// ==========================================
// CONTROLES DE TRANSPARENCIA
// ==========================================

function initializeTransparencyController() {
    const slider = document.getElementById('transparency-slider');
    const valueDisplay = document.getElementById('transparency-value');
    
    if (!slider || !valueDisplay) {
        console.warn('‚ö†Ô∏è Elementos de transparencia no encontrados');
        return false;
    }
    
    // Aplicar transparencia inicial
    updateTransparency(slider.value);
    
    // Evento para cambio de transparencia
    slider.addEventListener('input', function() {
        const value = this.value;
        updateTransparency(value);
        valueDisplay.textContent = value + '%';
    });
    
    console.log('üé≠ Controlador de transparencia inicializado');
    return true;
}

function updateTransparency(value) {
    // Convertir el valor del slider (0-100) a opacidad (0.7-1.0) para mejor legibilidad
    const opacity = Math.max(0.7, value / 100);
    
    // Aplicar transparencia a todos los paneles
    const panels = ['excel-container', 'manual-container', 'output-container'];
    panels.forEach(panelId => {
        const panel = document.getElementById(panelId);
        if (panel) {
            // Mantener el blur effect pero cambiar la opacidad
            const background = `rgba(255, 255, 255, ${opacity})`;
            panel.style.setProperty('background', background, 'important');
        }
    });
    
    console.log(`üé≠ Transparencia actualizada: ${value}% (opacidad: ${opacity.toFixed(2)})`);
}

// ==========================================
// CONTROLES DE PANELES
// ==========================================

function togglePanel(panelId) {
    const panel = document.getElementById(panelId);
    const toggleBtn = panel?.querySelector('.panel-toggle');
    
    if (!panel) {
        console.warn(`‚ö†Ô∏è Panel ${panelId} no encontrado`);
        return;
    }
    
    if (panel.classList.contains('minimized')) {
        // Restaurar desde minimizado a normal
        panel.classList.remove('minimized');
        panel.classList.remove('maximized');
        if (toggleBtn) toggleBtn.textContent = '‚àí';
        console.log(`üìñ Panel ${panelId} restaurado a tama√±o normal`);
    } else if (panel.classList.contains('maximized')) {
        // Cambiar de maximizado a minimizado
        panel.classList.remove('maximized');
        panel.classList.add('minimized');
        if (toggleBtn) toggleBtn.textContent = '+';
        console.log(`üìï Panel ${panelId} minimizado desde maximizado`);
    } else {
        // Cambiar de normal a minimizado
        panel.classList.add('minimized');
        if (toggleBtn) toggleBtn.textContent = '+';
        console.log(`üìï Panel ${panelId} minimizado`);
    }
}

function maximizePanel(panelId) {
    const panel = document.getElementById(panelId);
    const toggleBtn = panel?.querySelector('.panel-toggle');
    
    if (!panel) return;
    
    // Quitar estados previos y maximizar
    panel.classList.remove('minimized');
    panel.classList.add('maximized');
    if (toggleBtn) toggleBtn.textContent = '‚àí';
    console.log(`üîç Panel ${panelId} maximizado`);
}

function setupPanelInteractions() {
    const panels = ['excel-container', 'manual-container', 'output-container'];
    
    panels.forEach(panelId => {
        const panel = document.getElementById(panelId);
        if (panel) {
            // Doble click en el t√≠tulo para maximizar
            const title = panel.querySelector('h1, h2, h3');
            if (title) {
                title.style.cursor = 'pointer';
                title.addEventListener('dblclick', () => {
                    if (panel.classList.contains('maximized')) {
                        // Si ya est√° maximizado, volver a normal
                        panel.classList.remove('maximized');
                        console.log(`üìñ Panel ${panelId} vuelto a tama√±o normal`);
                    } else {
                        // Maximizar panel
                        maximizePanel(panelId);
                    }
                });
                
                // Tooltip para indicar doble-click
                title.title = 'Doble-click para maximizar/restaurar';
            }
        }
    });
    
    console.log('üîß Interacciones de paneles configuradas');
}

// Funci√≥n legacy - ahora redirige a createMapNavigationControls
function setupNavigationControls() {
    console.log('üó∫Ô∏è Configurando controles de navegaci√≥n...');
    createMapNavigationControls();
}

function toggleAllPanels() {
    const panels = document.querySelectorAll('.transparency-target');
    const anyVisible = Array.from(panels).some(panel => !panel.classList.contains('minimized'));
    
    panels.forEach(panel => {
        const toggleBtn = panel.querySelector('.panel-toggle');
        if (anyVisible) {
            panel.classList.add('minimized');
            if (toggleBtn) toggleBtn.textContent = '+';
        } else {
            panel.classList.remove('minimized');
            if (toggleBtn) toggleBtn.textContent = '‚àí';
        }
    });
    
    console.log(`üéØ Todos los paneles ${anyVisible ? 'minimizados' : 'restaurados'}`);
}

// ==========================================
// CONTROLES DE NAVEGACI√ìN
// ==========================================

function createMapNavigationControls() {
    // Evitar crear controles duplicados
    const existing = document.getElementById('map-navigation');
    if (existing) return;
    
    const navControls = document.createElement('div');
    navControls.id = 'map-navigation';
    navControls.className = 'floating-control';
    navControls.style.cssText = `
        position: fixed;
        bottom: 100px;
        left: 20px;
        z-index: 1001;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 12px;
        padding: 8px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.2);
        border: 1px solid rgba(255, 255, 255, 0.2);
        display: flex;
        flex-direction: row;
        gap: 8px;
    `;
    
    navControls.innerHTML = `
        <button onclick="fitAllZonesInMap()" title="Ver todas las zonas" style="
            background: rgba(76, 175, 80, 0.9);
            color: white;
            border: none;
            padding: 8px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s ease;
            min-width: 35px;
            height: 35px;
        ">üîç</button>
        <button onclick="toggleAllPanels()" title="Minimizar/Restaurar paneles" style="
            background: rgba(33, 150, 243, 0.9);
            color: white;
            border: none;
            padding: 8px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s ease;
            min-width: 35px;
            height: 35px;
        ">üìã</button>
        <button onclick="resetMapView()" title="Centrar en Provincia Barcelona" style="
            background: rgba(255, 152, 0, 0.9);
            color: white;
            border: none;
            padding: 8px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s ease;
            min-width: 35px;
            height: 35px;
        ">üè†</button>
    `;
    
    document.body.appendChild(navControls);
    console.log('üîß Controles de navegaci√≥n creados');
}

function resetMapView() {
    if (map) {
        map.setView([41.5, 2.0], 10); // Vista de Provincia de Barcelona
        console.log('üè† Vista del mapa reseteada a Provincia de Barcelona');
    }
}

function fitAllZonesInMap() {
    if (!map || !currentZones || currentZones.length === 0) {
        console.warn('‚ö†Ô∏è No hay zonas para ajustar la vista, centrando en Provincia Barcelona');
        resetMapView();
        return;
    }
    
    const allCoords = [];
    currentZones.forEach(zone => {
        zone.addresses?.forEach(addr => {
            if (addr.lat && addr.lng) {
                allCoords.push([addr.lat, addr.lng]);
            }
        });
    });
    
    if (allCoords.length > 0) {
        const group = new L.featureGroup();
        allCoords.forEach(coord => {
            L.marker(coord).addTo(group);
        });
        
        map.fitBounds(group.getBounds().pad(0.1));
        console.log(`üîç Vista ajustada a ${allCoords.length} direcciones`);
        
        // Limpiar marcadores temporales
        setTimeout(() => {
            group.clearLayers();
        }, 100);
    } else {
        resetMapView();
    }
}

// ==========================================
// INDICADOR DE ZONAS
// ==========================================

function createZoneIndicator(zoneCount) {
    // Remover indicador existente si existe
    const existing = document.getElementById('zone-indicator');
    if (existing) {
        existing.remove();
    }
    
    if (zoneCount > 0) {
        const indicator = document.createElement('div');
        indicator.id = 'zone-indicator';
        indicator.className = 'zone-indicator';
        
        // Informaci√≥n detallada
        let totalAddresses = 0;
        if (currentZones && currentZones.length > 0) {
            totalAddresses = currentZones.reduce((sum, zone) => sum + (zone.addresses?.length || 0), 0);
        }
        
        indicator.innerHTML = `
            <div style="display: flex; align-items: center; gap: 8px;">
                <span style="font-size: 16px;">üìç</span>
                <div style="line-height: 1.2;">
                    <div style="font-weight: bold;">${zoneCount} Zonas Activas</div>
                    ${totalAddresses > 0 ? `<div style="font-size: 11px; opacity: 0.8;">${totalAddresses} direcciones total</div>` : ''}
                </div>
            </div>
        `;
        
        document.body.appendChild(indicator);
        
        // Animaci√≥n de aparici√≥n
        indicator.style.transform = 'translateY(-20px)';
        indicator.style.opacity = '0';
        setTimeout(() => {
            indicator.style.transform = 'translateY(0)';
            indicator.style.opacity = '1';
        }, 100);
    }
}

// ==========================================
// FUNCIONES DE PRUEBA
// ==========================================

function testFloatingInterface() {
    console.log('üß™ === PRUEBA DE INTERFAZ FLOTANTE ===');
    
    const elements = {
        map: document.getElementById('map'),
        transparencyController: document.getElementById('transparency-controller'),
        transparencySlider: document.getElementById('transparency-slider'),
        excelContainer: document.getElementById('excel-container'),
        manualContainer: document.getElementById('manual-container'),
        outputContainer: document.getElementById('output-container'),
        mapNavigation: document.getElementById('map-navigation'),
        zoneIndicator: document.getElementById('zone-indicator')
    };
    
    console.log('üìã Estado de elementos:');
    Object.entries(elements).forEach(([key, el]) => {
        const exists = !!el;
        const visible = exists && el.style.display !== 'none';
        console.log(`   - ${key}: ${exists ? '‚úÖ' : '‚ùå'} ${exists ? (visible ? 'üëÅÔ∏è' : 'üëÄ') : ''}`);
        
        if (exists && key !== 'zoneIndicator') {
            const styles = window.getComputedStyle(el);
            const position = styles.position;
            const zIndex = styles.zIndex;
            console.log(`     Position: ${position}, Z-Index: ${zIndex}`);
        }
    });
    
    // Probar transparencia
    if (elements.transparencySlider) {
        const currentValue = elements.transparencySlider.value;
        console.log(`üé≠ Transparencia actual: ${currentValue}%`);
    }
    
    // Verificar que el mapa sea fullscreen
    if (elements.map) {
        const rect = elements.map.getBoundingClientRect();
        const isFullscreen = rect.width >= window.innerWidth * 0.9 && rect.height >= window.innerHeight * 0.9;
        console.log(`üó∫Ô∏è Mapa fullscreen: ${isFullscreen ? '‚úÖ' : '‚ùå'} (${Math.round(rect.width)}x${Math.round(rect.height)})`);
    }
    
    console.log('‚úÖ Prueba completada');
}

function createSampleZones() {
    console.log('üß™ Creando zonas de muestra para Provincia de Barcelona...');
    
    currentZones = [
        {
            id: 1,
            addresses: [
                { address: 'Barcelona, Barcelona', lat: 41.3851, lng: 2.1734, region: 'Barcelona Capital' },
                { address: 'L\'Hospitalet de Llobregat, Barcelona', lat: 41.3598, lng: 2.0994, region: 'Baix Llobregat' }
            ]
        },
        {
            id: 2,
            addresses: [
                { address: 'Sabadell, Barcelona', lat: 41.5433, lng: 2.1090, region: 'Vall√®s Occidental' },
                { address: 'Terrassa, Barcelona', lat: 41.5640, lng: 2.0084, region: 'Vall√®s Occidental' }
            ]
        },
        {
            id: 3,
            addresses: [
                { address: 'Badalona, Barcelona', lat: 41.4502, lng: 2.2445, region: 'Barcelon√®s Nord' },
                { address: 'Matar√≥, Barcelona', lat: 41.5339, lng: 2.4447, region: 'Maresme' }
            ]
        }
    ];
    
    // Mostrar zonas en el mapa
    displayZonesOnMap(currentZones);
    
    // Crear indicador
    createZoneIndicator(currentZones.length);
    
    console.log('‚úÖ Zonas de muestra creadas');
}

function displayZonesOnMap(zones) {
    if (!map) {
        console.error('‚ùå Mapa no inicializado');
        return;
    }
    
    if (!zones || zones.length === 0) {
        console.warn('‚ö†Ô∏è No hay zonas para mostrar');
        return;
    }
    
    console.log(`üó∫Ô∏è Mostrando ${zones.length} zonas en el mapa`);
    
    // Limpiar marcadores existentes
    zoneMarkers.forEach(marker => {
        if (marker && marker.remove) marker.remove();
    });
    zoneMarkers = [];
    
    // Colores para las zonas
    const colors = ['#FF0000', '#0000FF', '#00FF00', '#FF00FF', '#FFA500', '#800080', '#00FFFF', '#FFFF00'];
    
    let totalMarkersAdded = 0;
    
    zones.forEach((zone, zoneIndex) => {
        const color = colors[zoneIndex % colors.length];
        console.log(`üìç Procesando Zona ${zone.id} con ${zone.addresses?.length || 0} direcciones`);
        
        zone.addresses?.forEach((addr, addrIndex) => {
            if (addr.lat && addr.lng && !isNaN(addr.lat) && !isNaN(addr.lng)) {
                console.log(`   ‚úÖ Agregando marcador: ${addr.address} -> ${addr.lat}, ${addr.lng}`);
                
                const marker = L.marker([addr.lat, addr.lng], {
                    icon: L.divIcon({
                        html: `<div style="background: ${color}; color: white; width: 30px; height: 30px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-weight: bold; font-size: 12px; border: 2px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.3);">${zone.id}</div>`,
                        className: 'custom-zone-marker',
                        iconSize: [30, 30]
                    })
                }).addTo(map);
                
                marker.bindPopup(`
                    <div style="font-family: Arial, sans-serif; min-width: 200px;">
                        <h4 style="margin: 0 0 8px 0; color: ${color};">Zona ${zone.id}</h4>
                        <p style="margin: 0 0 8px 0; font-size: 12px;"><strong>${addr.address}</strong></p>
                        ${addr.region ? `<p style="margin: 0 0 4px 0; font-size: 11px; color: #4CAF50;">üìç Regi√≥n: ${addr.region}</p>` : ''}
                        <p style="margin: 4px 0 0 0; font-size: 10px; color: #666;">
                            üåç ${addr.lat.toFixed(6)}, ${addr.lng.toFixed(6)}
                        </p>
                    </div>
                `);
                
                zoneMarkers.push(marker);
                totalMarkersAdded++;
            } else {
                console.warn(`   ‚ùå Direcci√≥n sin coordenadas v√°lidas: ${addr.address}`);
            }
        });
    });
    
    console.log(`‚úÖ Se agregaron ${totalMarkersAdded} marcadores al mapa`);
    
    // Ajustar vista autom√°ticamente
    if (totalMarkersAdded > 0) {
        setTimeout(() => {
            fitAllZonesInMap();
        }, 500);
    }
}

// ==========================================
// ATAJOS DE TECLADO
// ==========================================

document.addEventListener('keydown', function(e) {
    // Ctrl/Cmd + H: Alternar paneles
    if ((e.ctrlKey || e.metaKey) && e.key === 'h') {
        e.preventDefault();
        toggleAllPanels();
    }
    
    // Ctrl/Cmd + M: Resetear mapa
    if ((e.ctrlKey || e.metaKey) && e.key === 'm') {
        e.preventDefault();
        resetMapView();
    }
    
    // Ctrl/Cmd + T: Test interfaz
    if ((e.ctrlKey || e.metaKey) && e.key === 't') {
        e.preventDefault();
        testFloatingInterface();
    }
    
    // Ctrl/Cmd + S: Crear zonas de muestra
    if ((e.ctrlKey || e.metaKey) && e.key === 's') {
        e.preventDefault();
        createSampleZones();
    }
});

// ==========================================
// MANEJO DE ARCHIVOS
// ==========================================

function setupFileHandling() {
    console.log('üìÇ Configurando manejo de archivos...');
    
    // Inicializar elementos del DOM
    elements.readExcel = document.getElementById('read-excel');
    elements.excelFile = document.getElementById('excel-file');
    elements.zoneCount = document.getElementById('zone-count');
    elements.sortedAddresses = document.getElementById('sorted-addresses');
    
    if (elements.readExcel) {
        elements.readExcel.addEventListener('click', async function() {
            const file = elements.excelFile?.files[0];
            if (!file) {
                alert('Por favor selecciona un archivo primero');
                return;
            }
            
            try {
                console.log('üìÇ Leyendo archivo:', file.name);
                const addresses = await readFile(file);
                
                if (addresses && addresses.length > 0) {
                    console.log(`‚úÖ Se cargaron ${addresses.length} direcciones`);
                    
                    // Crear zonas autom√°ticamente
                    const zoneCount = parseInt(elements.zoneCount?.value || 3);
                    const zones = createZonesFromAddresses(addresses, zoneCount);
                    
                    // Aplicar geocodificaci√≥n
                    simulateCoordinatesForZones(zones);
                    
                    // Actualizar interfaz
                    currentZones = zones;
                    updateResultsWithZones(zones);
                    displayZonesOnMap(zones);
                    
                } else {
                    alert('‚ùå No se encontraron direcciones v√°lidas en el archivo');
                }
            } catch (error) {
                console.error('‚ùå Error al leer archivo:', error);
                alert('‚ùå Error al leer el archivo: ' + error.message);
            }
        });
    } else {
        console.warn('‚ö†Ô∏è Bot√≥n read-excel no encontrado en el DOM');
    }
    
    console.log('‚úÖ Manejo de archivos configurado');
}

async function readFile(file) {
    console.log(`üìñ Procesando archivo: ${file.name} (${file.type})`);
    
    const fileText = await file.text();
    const lines = fileText.split('\n')
        .map(line => line.trim())
        .filter(line => line.length > 0);
    
    console.log(`üìã Se encontraron ${lines.length} l√≠neas`);
    
    // Crear objetos de direcci√≥n b√°sicos
    const addresses = lines.map((line, index) => ({
        id: index + 1,
        address: line,
        lat: null,
        lng: null,
        geocoded: false
    }));
    
    return addresses;
}

function displayAddresses(addresses) {
    if (!elements.sortedAddresses) return;
    
    elements.sortedAddresses.innerHTML = '';
    
    const header = document.createElement('li');
    header.innerHTML = `<strong>üìç ${addresses.length} direcciones cargadas:</strong>`;
    header.style.cssText = 'color: #2196F3; font-weight: bold; border-bottom: 2px solid #2196F3; padding-bottom: 5px; margin-bottom: 10px;';
    elements.sortedAddresses.appendChild(header);
    
    addresses.forEach((addr, index) => {
        const li = document.createElement('li');
        li.innerHTML = `${index + 1}. ${addr.address}`;
        li.style.cssText = 'padding: 5px 0; border-bottom: 1px solid rgba(0,0,0,0.1);';
        elements.sortedAddresses.appendChild(li);
    });
    
    console.log(`üìã Direcciones mostradas en la interfaz`);
}

function createZonesFromAddresses(addresses, zoneCount) {
    console.log(`üóÇÔ∏è Creando ${zoneCount} zonas para ${addresses.length} direcciones...`);
    
    // Dividir direcciones en zonas de manera equitativa
    const addressesPerZone = Math.ceil(addresses.length / zoneCount);
    const zones = [];
    
    for (let i = 0; i < zoneCount; i++) {
        const startIndex = i * addressesPerZone;
        const endIndex = Math.min(startIndex + addressesPerZone, addresses.length);
        const zoneAddresses = addresses.slice(startIndex, endIndex).map(addr => ({
            address: typeof addr === 'string' ? addr : addr.address || addr,
            lat: null,
            lng: null,
            geocoded: false
        }));
        
        if (zoneAddresses.length > 0) {
            zones.push({
                id: i + 1,
                addresses: zoneAddresses
            });
        }
    }
    
    console.log(`‚úÖ Creadas ${zones.length} zonas`);
    
    // Devolver las zonas sin procesarlas autom√°ticamente
    return zones;
}

function simulateCoordinatesForZones(zones) {
    console.log('üéØ Simulando coordenadas para Provincia de Barcelona...');
    
    // Sub-regiones de la Provincia de Barcelona para distribuci√≥n realista
    const barcelonaRegions = [
        // Barcelona Ciudad y √Årea Metropolitana
        {
            name: 'Barcelona Capital',
            bounds: { north: 41.47, south: 41.32, east: 2.25, west: 2.05 }
        },
        // Vall√®s Occidental (Sabadell, Terrassa, etc.)
        {
            name: 'Vall√®s Occidental',
            bounds: { north: 41.58, south: 41.48, east: 2.15, west: 1.90 }
        },
        // Vall√®s Oriental (Granollers, Mollet, etc.)
        {
            name: 'Vall√®s Oriental',
            bounds: { north: 41.65, south: 41.50, east: 2.30, west: 2.10 }
        },
        // Baix Llobregat (L'Hospitalet, Cornell√†, etc.)
        {
            name: 'Baix Llobregat',
            bounds: { north: 41.40, south: 41.25, east: 2.15, west: 1.90 }
        },
        // Barcelon√®s Nord (Badalona, Santa Coloma, etc.)
        {
            name: 'Barcelon√®s Nord',
            bounds: { north: 41.48, south: 41.40, east: 2.28, west: 2.15 }
        },
        // Maresme (Matar√≥, Vilassar, etc.)
        {
            name: 'Maresme',
            bounds: { north: 41.55, south: 41.45, east: 2.48, west: 2.30 }
        }
    ];
    
    zones.forEach(zone => {
        zone.addresses.forEach(addr => {
            // Seleccionar una regi√≥n aleatoria de Barcelona
            const region = barcelonaRegions[Math.floor(Math.random() * barcelonaRegions.length)];
            
            // Generar coordenadas dentro de esa regi√≥n espec√≠fica
            const bounds = region.bounds;
            addr.lat = bounds.south + Math.random() * (bounds.north - bounds.south);
            addr.lng = bounds.west + Math.random() * (bounds.east - bounds.west);
            addr.geocoded = true;
            addr.region = region.name;
            
            // Log para debugging
            console.log(`üìç ${addr.address} -> ${addr.lat.toFixed(4)}, ${addr.lng.toFixed(4)} (${addr.region})`);
        });
    });
    
    // Mostrar estad√≠sticas simples
    const totalAddresses = zones.reduce((total, zone) => total + zone.addresses.length, 0);
    console.log(`‚úÖ ${totalAddresses} direcciones geocodificadas en la Provincia de Barcelona`);
    
    // Mostrar zonas en el mapa
    displayZonesOnMap(zones);
}

function updateResultsWithZones(zones) {
    const sortedAddresses = document.getElementById('sorted-addresses');
    if (!sortedAddresses) {
        console.warn('‚ö†Ô∏è Elemento sorted-addresses no encontrado');
        return;
    }
    
    sortedAddresses.innerHTML = '';
    
    zones.forEach(zone => {
        const zoneHeader = document.createElement('li');
        zoneHeader.innerHTML = `<strong>üè∑Ô∏è Zona ${zone.id} (${zone.addresses.length} direcciones):</strong>`;
        zoneHeader.style.cssText = 'color: #4CAF50; font-weight: bold; margin-top: 15px; padding: 8px; background: rgba(76, 175, 80, 0.1); border-radius: 5px;';
        sortedAddresses.appendChild(zoneHeader);
        
        zone.addresses.forEach((addr, index) => {
            const li = document.createElement('li');
            li.innerHTML = `&nbsp;&nbsp;&nbsp;${index + 1}. ${addr.address}`;
            li.style.cssText = 'padding: 3px 0; color: #333; margin-left: 15px;';
            sortedAddresses.appendChild(li);
        });
    });
    
    // Mostrar el panel de resultados si est√° oculto
    const outputContainer = document.getElementById('output-container');
    if (outputContainer) {
        outputContainer.style.display = 'block';
    }
    
    console.log(`üìä Resultados actualizados con ${zones.length} zonas`);
}

// ==========================================
// REDIMENSIONADO DE VENTANA
// ==========================================

window.addEventListener('resize', function() {
    if (map) {
        setTimeout(() => {
            map.invalidateSize();
            console.log('üìê Tama√±o del mapa ajustado');
        }, 100);
    }
});

// ==========================================
// FUNCIONES GLOBALES
// ==========================================

// ==========================================
// FUNCIONES DE VALIDACI√ìN DE COORDENADAS
// ==========================================

function validateBarcelonaCoordinates(lat, lng) {
    // L√≠mites ampliados de la Provincia de Barcelona para validaci√≥n
    const barcelonaBounds = {
        north: 42.1,   // Norte ampliado
        south: 41.1,   // Sur ampliado
        east: 2.7,     // Este ampliado (incluye toda la costa)
        west: 1.7      // Oeste ampliado
    };
    
    return (lat >= barcelonaBounds.south && lat <= barcelonaBounds.north &&
            lng >= barcelonaBounds.west && lng <= barcelonaBounds.east);
}

function testGeocoding() {
    console.log('üß™ === PRUEBA DE GEOCODIFICACI√ìN ===');
    
    // Crear direcciones de prueba de la Provincia de Barcelona
    const testAddresses = [
        'Barcelona, Espa√±a',
        'Sabadell, Espa√±a',
        'Terrassa, Espa√±a', 
        'Badalona, Espa√±a',
        'Hospitalet de Llobregat, Espa√±a'
    ].map((addr, index) => ({
        id: index + 1,
        address: addr,
        lat: null,
        lng: null,
        geocoded: false
    }));
    
    console.log(`üìç Probando geocodificaci√≥n con ${testAddresses.length} direcciones...`);
    
    // Simular coordenadas
    const zones = [{ id: 1, addresses: testAddresses }];
    simulateCoordinatesForZones(zones);
    
    // Validar cada coordenada
    let validCoords = 0;
    let invalidCoords = 0;
    
    testAddresses.forEach(addr => {
        const isValid = validateBarcelonaCoordinates(addr.lat, addr.lng);
        if (isValid) {
            validCoords++;
            console.log(`‚úÖ ${addr.address}: ${addr.lat.toFixed(4)}, ${addr.lng.toFixed(4)} (${addr.region})`);
        } else {
            invalidCoords++;
            console.log(`‚ùå ${addr.address}: ${addr.lat.toFixed(4)}, ${addr.lng.toFixed(4)} - FUERA DE PROVINCIA BARCELONA`);
        }
    });
    
    console.log(`üìä Resultados: ${validCoords} v√°lidas, ${invalidCoords} inv√°lidas`);
    
    // Mostrar en el mapa si est√°n todas v√°lidas
    if (invalidCoords === 0) {
        currentZones = zones;
        displayZonesOnMap(zones);
        createZoneIndicator(1);
        console.log('üéâ ¬°Todas las coordenadas est√°n en la Provincia de Barcelona!');
    } else {
        console.log('‚ö†Ô∏è Algunas coordenadas necesitan ajuste');
    }
    
    return { valid: validCoords, invalid: invalidCoords, total: testAddresses.length };
}

function testBarcelonaFile() {
    console.log('üß™ === PRUEBA CON ARCHIVO DE DIRECCIONES BARCELONA ===');
    
    // Simular carga del archivo direcciones-barcelona.txt
    const barcelonaAddresses = [
        'Carrer de Balmes 150, Barcelona',
        'Passeig de Gr√†cia 92, Barcelona',
        'Carrer de Muntaner 245, Barcelona',
        'Carrer de la Independ√®ncia 45, Sabadell',
        'Pla√ßa de la Llibertat 12, Sabadell',
        'Carrer de Colom 156, Terrassa',
        'Pla√ßa Vella 8, Terrassa',
        'Carrer del Mar 123, Badalona',
        'Avinguda President Companys 67, Badalona',
        'Avinguda Maresme 234, Matar√≥'
    ];
    
    console.log(`üìÇ Simulando carga de ${barcelonaAddresses.length} direcciones...`);
    
    // Crear zonas autom√°ticamente (3 zonas)
    const zones = createZonesFromAddresses(barcelonaAddresses, 3);
    
    // Aplicar geocodificaci√≥n
    simulateCoordinatesForZones(zones);
    
    // Mostrar resultado
    currentZones = zones;
    updateResultsWithZones(zones);
    displayZonesOnMap(zones);
    
    console.log('üéâ Prueba completada - revisa el mapa y los resultados');
    return zones;
}

function diagnosticoCompleto() {
    console.log('üîç === DIAGN√ìSTICO COMPLETO DEL SISTEMA ===');
    
    // 1. Verificar mapa
    console.log('üìç 1. Estado del Mapa:');
    console.log('   - Mapa inicializado:', !!map);
    console.log('   - Zona actual:', map ? map.getCenter() : 'No disponible');
    console.log('   - Zoom actual:', map ? map.getZoom() : 'No disponible');
    
    // 2. Verificar elementos DOM
    console.log('üìã 2. Elementos DOM:');
    const requiredElements = [
        'map', 'excel-container', 'manual-container', 'output-container',
        'read-excel', 'excel-file', 'zone-count', 'sorted-addresses'
    ];
    
    requiredElements.forEach(id => {
        const element = document.getElementById(id);
        console.log(`   - ${id}:`, !!element);
    });
    
    // 3. Verificar zonas actuales
    console.log('üóÇÔ∏è 3. Zonas Actuales:');
    console.log('   - N√∫mero de zonas:', currentZones.length);
    console.log('   - Marcadores en mapa:', zoneMarkers.length);
    
    // 4. Verificar funciones globales
    console.log('üîß 4. Funciones Disponibles:');
    const functions = [
        'testFloatingInterface', 'createSampleZones', 'testGeocoding',
        'testBarcelonaFile', 'toggleAllPanels', 'resetMapView',
        'fitAllZonesInMap', 'setupNavigationControls'
    ];
    
    functions.forEach(func => {
        console.log(`   - ${func}:`, typeof window[func] === 'function' ? '‚úÖ' : '‚ùå');
    });
    
    // 5. Controles de navegaci√≥n
    console.log('üó∫Ô∏è 5. Controles de Navegaci√≥n:');
    const navControls = document.getElementById('map-navigation');
    console.log('   - Controles presentes:', !!navControls);
    if (navControls) {
        console.log('   - Posici√≥n:', navControls.style.position);
        console.log('   - Botones:', navControls.querySelectorAll('button').length);
        console.log('   - Ubicaci√≥n: esquina inferior izquierda (no molesta al escribir)');
    }
    
    console.log('‚úÖ Diagn√≥stico completado');
}

function pruebaGeocodificacionCompleta() {
    console.log('üéØ === PRUEBA COMPLETA DE GEOCODIFICACI√ìN ===');
    
    // Limpiar mapa primero
    zoneMarkers.forEach(marker => {
        if (marker && marker.remove) marker.remove();
    });
    zoneMarkers = [];
    
    // Crear datos de prueba espec√≠ficos para Barcelona
    const direccionesPrueba = [
        'Pla√ßa Catalunya, Barcelona',
        'Sagrada Fam√≠lia, Barcelona', 
        'Park G√ºell, Barcelona',
        'Plaza Mayor, Sabadell',
        'Centro, Terrassa',
        'Rambla, Badalona'
    ];
    
    console.log(`üìÇ Probando con ${direccionesPrueba.length} direcciones espec√≠ficas de Barcelona...`);
    
    // Crear 2 zonas
    const zones = createZonesFromAddresses(direccionesPrueba, 2);
    
    // Aplicar geocodificaci√≥n mejorada
    console.log('üéØ Aplicando geocodificaci√≥n...');
    simulateCoordinatesForZones(zones);
    
    // Verificar que las coordenadas son v√°lidas
    let coordenadasValidas = 0;
    zones.forEach(zone => {
        zone.addresses.forEach(addr => {
            if (addr.lat && addr.lng && !isNaN(addr.lat) && !isNaN(addr.lng)) {
                coordenadasValidas++;
                console.log(`‚úÖ ${addr.address}: ${addr.lat.toFixed(4)}, ${addr.lng.toFixed(4)}`);
            } else {
                console.error(`‚ùå Coordenadas inv√°lidas para: ${addr.address}`);
            }
        });
    });
    
    console.log(`üìä Coordenadas v√°lidas: ${coordenadasValidas}/${direccionesPrueba.length}`);
    
    // Mostrar en mapa
    currentZones = zones;
    updateResultsWithZones(zones);
    displayZonesOnMap(zones);
    createZoneIndicator(zones.length);
    
    // Centrar vista en Barcelona despu√©s de un momento
    setTimeout(() => {
        if (map) {
            map.setView([41.4, 2.15], 11);
            console.log('üó∫Ô∏è Vista centrada en Provincia de Barcelona');
        }
    }, 1000);
    
    console.log('üéâ Prueba de geocodificaci√≥n completada');
    return zones;
}

function resumenProblemasSolucionados() {
    console.log('üõ†Ô∏è === RESUMEN DE PROBLEMAS SOLUCIONADOS ===');
    console.log('');
    console.log('‚úÖ PROBLEMA 1: "La ventana de la lupa molesta al insertar texto"');
    console.log('   SOLUCI√ìN: Controles movidos a la esquina inferior IZQUIERDA');
    console.log('   ANTES: Esquina derecha (interfer√≠a con campos de texto)');
    console.log('   AHORA: Esquina izquierda (no interfiere)');
    console.log('');
    console.log('‚úÖ PROBLEMA 2: "No aparecen las dem√°s funciones"');
    console.log('   SOLUCI√ìN: Todas las funciones est√°n disponibles:');
    console.log('   - testBarcelonaFile() ‚Üê Prueba r√°pida');
    console.log('   - pruebaGeocodificacionCompleta() ‚Üê Prueba completa');
    console.log('   - createSampleZones() ‚Üê Zonas de ejemplo');
    console.log('   - diagnosticoCompleto() ‚Üê Verificar sistema');
    console.log('   - toggleAllPanels() ‚Üê Ocultar/mostrar paneles');
    console.log('   - fitAllZonesInMap() ‚Üê Ajustar vista');
    console.log('   - resetMapView() ‚Üê Centrar en Barcelona');
    console.log('');
    console.log('‚úÖ PROBLEMA 3: "No funciona correctamente la geocodificaci√≥n"');
    console.log('   SOLUCI√ìN: Sistema mejorado con:');
    console.log('   - Coordenadas espec√≠ficas para Provincia de Barcelona');
    console.log('   - Validaci√≥n ampliada de l√≠mites geogr√°ficos');
    console.log('   - Logging detallado para debugging');
    console.log('   - Auto-centrado en el mapa despu√©s de geocodificar');
    console.log('   - Verificaci√≥n de coordenadas v√°lidas');
    console.log('');
    console.log('üéØ PRUEBA RECOMENDADA:');
    console.log('   Ejecuta: pruebaGeocodificacionCompleta()');
    console.log('   ‚Üí Ver√°s marcadores en el mapa de Barcelona');
    console.log('   ‚Üí Coordenadas mostradas en consola');
    console.log('   ‚Üí Resultados en panel lateral');
    console.log('');
    console.log('üó∫Ô∏è CONTROLES DISPONIBLES (esquina inferior izquierda):');
    console.log('   üîç = Ver todas las zonas');
    console.log('   üìã = Alternar paneles');
    console.log('   üè† = Centrar en Barcelona');
    console.log('');
    console.log('‚úÖ TODOS LOS PROBLEMAS REPORTADOS HAN SIDO SOLUCIONADOS');
}

// Hacer funciones accesibles globalmente
window.togglePanel = togglePanel;
window.maximizePanel = maximizePanel;
window.toggleAllPanels = toggleAllPanels;
window.resetMapView = resetMapView;
window.fitAllZonesInMap = fitAllZonesInMap;
window.testFloatingInterface = testFloatingInterface;
window.createSampleZones = createSampleZones;
window.readFile = readFile;
window.createZonesFromAddresses = createZonesFromAddresses;
window.testGeocoding = testGeocoding;
window.testBarcelonaFile = testBarcelonaFile;
window.diagnosticoCompleto = diagnosticoCompleto;
window.pruebaGeocodificacionCompleta = pruebaGeocodificacionCompleta;
window.resumenProblemasSolucionados = resumenProblemasSolucionados;
window.validateBarcelonaCoordinates = validateBarcelonaCoordinates;
window.setupPanelInteractions = setupPanelInteractions;
window.setupNavigationControls = setupNavigationControls;
window.updateTransparency = updateTransparency;

// ==========================================
// INICIALIZACI√ìN PRINCIPAL
// ==========================================

document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ === INICIANDO APLICACI√ìN LIMPIA ===');
    
    try {
        // Inicializar mapa
        const mapInitialized = initializeMap();
        if (!mapInitialized) {
            throw new Error('No se pudo inicializar el mapa');
        }
        
        // Inicializar controles de transparencia
        const transparencyInitialized = initializeTransparencyController();
        if (transparencyInitialized) {
            console.log('‚úÖ Controles de transparencia inicializados');
        }
        
        // Crear controles de navegaci√≥n flotantes
        createMapNavigationControls();
        
        // Inicializar elementos b√°sicos
        elements.readExcel = document.getElementById('read-excel');
        elements.excelFile = document.getElementById('excel-file');
        elements.sortedAddresses = document.getElementById('sorted-addresses');
        elements.processExcel = document.getElementById('process-excel');
        elements.zoneCount = document.getElementById('zone-count');
        
        // Configurar event listeners para carga de archivos
        setupFileHandling();
        
        // Configurar interacciones de paneles
        setupPanelInteractions();
        
        // Configurar controles de navegaci√≥n  
        createMapNavigationControls();
        
        console.log('üéâ === APLICACI√ìN INICIADA EXITOSAMENTE ===');
        console.log('');
        console.log('üí° Comandos disponibles en consola:');
        console.log('   - testFloatingInterface() - Verificar interfaz');
        console.log('   - createSampleZones() - Crear zonas de prueba');
        console.log('   - testGeocoding() - Probar geocodificaci√≥n precisa');
        console.log('   - testBarcelonaFile() - Prueba r√°pida con direcciones Barcelona');
        console.log('   - pruebaGeocodificacionCompleta() - Prueba completa de geocodificaci√≥n con verificaci√≥n');
        console.log('   - diagnosticoCompleto() - Verificar estado completo del sistema');
        console.log('   - resumenProblemasSolucionados() - Ver resumen de todas las correcciones aplicadas');
        console.log('   - togglePanel("panel-id") - Alternar panel espec√≠fico');
        console.log('   - maximizePanel("panel-id") - Maximizar panel espec√≠fico');
        console.log('   - toggleAllPanels() - Minimizar/restaurar todos los paneles');
        console.log('   - resetMapView() - Resetear vista del mapa');
        console.log('   - fitAllZonesInMap() - Ajustar vista a todas las zonas');
        console.log('');
        console.log('üéπ Atajos de teclado:');
        console.log('   - Ctrl+H: Alternar paneles');
        console.log('   - Ctrl+M: Centrar en Provincia Barcelona');
        console.log('   - Ctrl+T: Test interfaz');
        console.log('   - Ctrl+S: Crear zonas de muestra (Provincia Barcelona)');
        console.log('');
        console.log('üìÇ Funciones de archivo:');
        console.log('   - ‚úÖ Cargar archivos TXT/CSV funciona');
        console.log('   - ‚úÖ Divisi√≥n autom√°tica en zonas');
        console.log('   - ‚úÖ Coordenadas simuladas en Provincia Barcelona');
        console.log('   - ‚úÖ Transparencia ajustable en tiempo real');
        console.log('');
        console.log('üì± Gesti√≥n de paneles:');
        console.log('   - Bot√≥n "‚àí/+": Minimizar/restaurar individual');
        console.log('   - Doble-click en t√≠tulo: Maximizar/restaurar');
        console.log('   - Los paneles est√°n posicionados sin superposici√≥n');
        console.log('   - Transparencia mejorada (70%-100%) para legibilidad');
        console.log('   - Controles de navegaci√≥n en esquina inferior izquierda (no interfieren al escribir)');
        
        // Auto-prueba despu√©s de 3 segundos
        setTimeout(() => {
            console.log('');
            console.log('üöÄ === EJECUTANDO PRUEBAS AUTOM√ÅTICAS ===');
            pruebaGeocodificacionCompleta();
            
            // Mostrar resumen despu√©s de 2 segundos m√°s
            setTimeout(() => {
                console.log('');
                resumenProblemasSolucionados();
            }, 2000);
        }, 3000);
        
    } catch (error) {
        console.error('‚ùå Error durante la inicializaci√≥n:', error);
        alert('‚ùå Error al inicializar la aplicaci√≥n: ' + error.message);
    }
});

console.log('üìÑ Script limpio cargado completamente');